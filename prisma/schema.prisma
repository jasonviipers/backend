generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  phone       String        @unique
  roles       String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  address     Address[]
  contract    Contract[]
  freelancer  Freelancer[]
  mission     Mission[]
  Recruitment Recruitment[]
  Payment     Payment[]

  @@map("users")
}

model Freelancer {
  id             Int           @id @default(autoincrement())
  siret          String        @unique
  tva            String        @unique
  iban           String        @unique
  skills         String[]
  certificates   String[]
  userId         String?
  availabilityId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  Availability   Availability? @relation(fields: [availabilityId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])

  @@map("freelancers")
}

model Contract {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  signature   String
  status      String[]
  price       Int
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  User        User?     @relation(fields: [userId], references: [id])
  mission     Mission[]

  @@map("contracts")
}

model Mission {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  price       Int
  userId      String?
  contractId  Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  Contract    Contract?  @relation(fields: [contractId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  location    Location[]

  @@map("missions")
}

model Availability {
  id          Int          @id @default(autoincrement())
  start       DateTime
  end         DateTime
  isAvailable Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  Freelancer  Freelancer[]

  @@map("availabilities")
}

model Recruitment {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  location    String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])

  @@map("recruitments")
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  zip       String
  country   String
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  missionId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Mission   Mission? @relation(fields: [missionId], references: [id])

  @@map("locations")
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Int
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@map("payments")
}
